# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[changelog]
# template for the changelog header
header = """
# Matrix Changelog\n
All notable changes to the matrix will be documented in this file.\n

![Cahier de vacances 2025-26](img/cahier-vacances.webp)

[![License](https://img.shields.io/github/license/coda-school/cahier-de-vacances-b3.svg)](https://github.com/coda-school/cahier-de-vacances-b3/?tab=MIT-1-ov-file#readme)

[![API](https://github.com/coda-school/cahier-de-vacances-b3/actions/workflows/api-ci.yml/badge.svg)](https://github.com/coda-school/cahier-de-vacances-b3/actions/workflows/api-ci.yml) [![React App](https://github.com/coda-school/cahier-de-vacances-b3/actions/workflows/front-ci.yml/badge.svg)](https://github.com/coda-school/cahier-de-vacances-b3/actions/workflows/front-ci.yml)

[![Code Smells](https://sonarcloud.io/api/project_badges/measure?project=coda-school_cahier-de-vacances-b3&metric=code_smells)](https://sonarcloud.io/summary/new_code?id=coda-school_cahier-de-vacances-b3) [![Coverage](https://sonarcloud.io/api/project_badges/measure?project=coda-school_cahier-de-vacances-b3&metric=coverage)](https://sonarcloud.io/summary/new_code?id=coda-school_cahier-de-vacances-b3) [![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=coda-school_cahier-de-vacances-b3&metric=alert_status)](https://sonarcloud.io/summary/new_code?id=coda-school_cahier-de-vacances-b3) [![Bugs](https://sonarcloud.io/api/project_badges/measure?project=coda-school_cahier-de-vacances-b3&metric=bugs)](https://sonarcloud.io/summary/new_code?id=coda-school_cahier-de-vacances-b3)

[![CodeScene Average Code Health](https://codescene.io/projects/70672/status-badges/average-code-health)](https://codescene.io/projects/70672) [![CodeScene Hotspot Code Health](https://codescene.io/projects/70672/status-badges/hotspot-code-health)](https://codescene.io/projects/70672)

"""

body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
            {% if commit.breaking %}[**breaking**] {% endif %}\
            {{ commit.message | upper_first }} \
            ([{{ commit.id | truncate(length=7, end="") }}](<REPO>/commit/{{ commit.id }}))\
    {% endfor %}
{% endfor %}\n
"""

footer = """
<!-- generated by git-cliff -->
"""

trim = true

postprocessors = [
  { pattern = '<REPO>', replace = "https://github.com/coda-school/cahier-de-vacances-b3" },
]
# render body even when there are no releases to process
# render_always = true
# output file path
# output = "test.md"

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # Replace issue numbers
  #{ pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))"},
  # Check spelling of the commit with https://github.com/crate-ci/typos
  # If the spelling is incorrect, it will be automatically fixed.
  #{ pattern = '.*', replace_command = 'typos --write-changes -' },
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat", group = "<!-- 0 -->üöÄ Features" },
  { message = "^fix", group = "<!-- 1 -->üêõ Bug Fixes" },
  { message = "^doc", group = "<!-- 3 -->üìö Documentation" },
  { message = "^perf", group = "<!-- 4 -->‚ö° Performance" },
  { message = "^refactor", group = "<!-- 2 -->üöú Refactor" },
  { message = "^style", group = "<!-- 5 -->üé® Styling" },
  { message = "^test", group = "<!-- 6 -->üß™ Testing" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(deps.*\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^chore|^ci", group = "<!-- 7 -->‚öôÔ∏è Miscellaneous Tasks" },
  { body = ".*security", group = "<!-- 8 -->üõ°Ô∏è Security" },
  { message = "^revert", group = "<!-- 9 -->‚óÄÔ∏è Revert" },
  { message = ".*", group = "<!-- 10 -->üíº Other" },
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
